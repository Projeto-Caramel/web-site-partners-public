@page "/update"
@using Caramel.Website.Partners.Layout.Components.Custom
@using Caramel.Website.Partners.Models.Exceptions
@using Caramel.Website.Partners.Models.Requests
@using Caramel.Website.Partners.Models.Requests.Auth
@using Caramel.Website.Partners.Models.Responses
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Net.Http.Headers
@using System.Net
@inject NavigationManager Navigator
@inject ISessionStorageService sessionStorage
@inject HttpService httpService

<PageTitle>Alteração de Senha</PageTitle>

<PreviousPageLink Class="previous-page-link-desktop" />

<div class="card-login">

    <img src="img/wave.svg" alt="wave-img" class="wave-img-mobile" />

    <div class="card-body">
        <PreviousPageLink Class="previous-page-link-mobile" />

        <div class="progress w-100 mb-4">
            <div class="progress-bar" role="progressbar" style="width: 100%" aria-valuenow="1" aria-valuemin="0" aria-valuemax="3"></div>
        </div>

        <h2 class="card-title text-center mb-4">Altere a sua Senha</h2>
        <p class="text-center">
            Digite sua <span>Nova Senha</span>.
        </p>

        <Callout Heading="Nota">
            Mínimo de 8 caracteres e 1 símbolo.
        </Callout>

        <EditForm Model="@request" OnValidSubmit="HandleConfirmation">

            <div class="mb-3">
                <label for="Email" class="form-label login-label">Senha</label>
                <InputText @bind-Value="request.Password" type="password" id="Password" class="form-control login-input" placeholder="Digite sua Nova Senha..." required />
            </div>

            <div class="mb-3">
                <label for="Password" class="form-label login-label">Confirmação</label>
                <InputText @bind-Value="confirmation" type="password" id="Password-Confimation" class="form-control login-input" placeholder="Confirme sua Nova Senha..." required />
            </div>

            <Button Type="BlazorBootstrap.ButtonType.Submit" class="btn login-btn w-100 mb-3" disabled="@isLoading">
                <span>
                    Confirmar
                </span>
                @if (isLoading)
                {
                    <i id="loader" class="bx bx-loader bx-spin"></i>
                }
            </Button>
        </EditForm>
    </div>
</div>

<CustomToastNotification @ref="notify" Messages="messages" />

@code {
    private CustomToastNotification notify;
    public List<ToastMessage> messages = new();
    private bool isLoading = false;
    private ChangePasswordRequest request = new ChangePasswordRequest();
    private string confirmation;

    private async Task HandleConfirmation()
    {
        isLoading = true;

        var isEqual = ValidatePassword(request.Password, confirmation);

        if (!isEqual)
        {
            isLoading = false;
            return;
        }

        var token = sessionStorage.GetItem<string>("token");
        var validTo = Convert.ToDateTime(sessionStorage.GetItem<string>("validTo"));

        if (!string.IsNullOrEmpty(token) && validTo >= DateTime.Now)
        {
            request.Id = sessionStorage.GetItem<string>("id");

            var result = await httpService.PutAsync<ChangePasswordRequest, object>("/auth/partner/password/change", request);

            if (result.StatusCode == HttpStatusCode.OK)
            {
                notify.ShowMessage(ToastType.Success, "Sucesso", "Senha alterada com sucesso.");
                await Task.Delay(3000);
                Navigator.NavigateTo("/");
            }
            else if (result.StatusCode == HttpStatusCode.UnprocessableEntity || result.StatusCode == HttpStatusCode.Unauthorized)
            {
                notify.ShowMessage(ToastType.Warning, "Aviso", $"{result.ErrorDetails} Tente novamente!");
            }
            else
            {
                notify.ShowMessage(ToastType.Danger, "Erro", "Não foi possível Atualizar a senha. Tente novamente mais tarde!");
            }
        }
        else
        {
            notify.ShowMessage(ToastType.Danger, "Erro", "Sua sessão expirou. Faça login novamente!");
        }

        isLoading = false;
    }

    private bool ValidatePassword(string password, string confirmation)
    {
        if (password != confirmation)
        {
            notify.ShowMessage(ToastType.Warning, "Aviso", "As senhas devem ser iguais. Tente novamente.");
            return false;
        }
        return true;
    }

    #region SetPageName
    protected override void OnInitialized()
    {
        SetPageName();
    }

    private void SetPageName()
    {
        sessionStorage.SetItem("pageName", "Alteração de Senha");
    }
    #endregion
}
