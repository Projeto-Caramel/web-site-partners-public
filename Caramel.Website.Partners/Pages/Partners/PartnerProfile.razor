@page "/backoffice/profile"
@using Caramel.Website.Partners.Layout.Components.Custom
@using Caramel.Website.Partners.Layout.Components.Custom.ProfileImage
@using Caramel.Website.Partners.Models.Entities
@using System.Net.Http.Headers
@using System.Text.Json
@using Caramel.Website.Partners.Models.Entities.Partner
@using Caramel.Website.Partners.Models.Requests.UsersControl
@using Caramel.Website.Partners.Models.Responses.UsersControl
@using System.Text.Encodings.Web
@inject ISessionStorageService sessionStorage
@inject HttpService httpService
@inject NavigationManager navigator
@inject IJSRuntime JSRuntime


<PageTitle>Perfil</PageTitle>

<EditForm Model="@data" OnValidSubmit="@HandleSubmit">
    <div id="profile-container">
        <div id="profile-basic-info-container">
            <div id="profile-image-container">
                <CustomProfileImage ProfileImageUrl="@imageUrl" Name="@data.Name" ImageChanged="@OnImageChanged" />
            </div>
            <div id="basic-info-container">
                <div id="partner-name-container">
                    <span class="ong-name">@data.Name</span>
                    <span class="ong-type">
                        @data.Type
                    </span>
                </div>
                <div id="partner-description-container">
                    <label class="form-label input-label">Descrição</label>
                    <textarea class="form-control partner-description" @bind="data.Description" @oninput="@UpdateDescriptionSize" maxlength="500" required></textarea>
                    <span class="description-counter">@(descrioptionSize)/500</span>
                </div>
            </div>
        </div>

        <div id="details-info-container">
            <span id="detail-info-title">Informações</span>

            <div id="info-inputs-container">
                <div class="info-inputs-line">
                    <div class="info-input-div w-75">
                        <label class="form-label input-label">Endereço</label>
                        <InputText type="text" class="form-control partner-description" @bind-Value="data.Address" required />
                    </div>
                    <div class="info-input-div w-25">
                        <label class="form-label input-label">Capacidade Máxima</label>
                        <InputNumber type="text" class="form-control partner-description" @bind-Value="data.MaxCapacity" required />
                    </div>
                </div>
                <div class="info-inputs-line">
                    <div class="info-input-div w-25">
                        <label class="form-label input-label">Telefone para Contato</label>
                        <InputText type="text" class="form-control partner-description" @bind-Value="data.Cellphone" required readonly />
                    </div>

                    <div class="info-input-div w-25">
                        <label class="form-label input-label">Email</label>
                        <InputText type="text" class="form-control partner-description" @bind-Value="data.Email" required readonly />
                    </div>

                    <div class="info-input-div w-25">
                        <label class="form-label input-label">CNPJ</label>
                        <InputText type="text" class="form-control partner-description" @bind-Value="data.CNPJ" />
                    </div>
                    <div class="info-input-div w-25">
                        <label class="form-label input-label">Taxa de Adoção</label>
                        <InputText type="number" @bind-Value="(data.AdoptionRate)" class="form-control partner-description" step="0.01" required />
                    </div>
                </div>
                <div class="info-inputs-line">
                    <div class="info-input-div w-25">
                        <label class="form-label input-label">PIX</label>
                        <InputText type="text" class="form-control partner-description" @bind-Value="data.PIX" required />
                    </div>

                    <div class="info-input-div w-25">
                        <label class="form-label input-label">Site</label>
                        <InputText type="text" class="form-control partner-description" @bind-Value="data.Website" />
                    </div>

                    <div class="info-input-div w-25">
                        <label class="form-label input-label">Instagram</label>
                        <InputText type="text" class="form-control partner-description" @bind-Value="data.Instagram" />
                    </div>

                    <div class="info-input-div w-25">
                        <label class="form-label input-label">Facebook</label>
                        <InputText type="text" class="form-control partner-description" @bind-Value="data.Facebook" />
                    </div>
                </div>
            </div>
        </div>

        <div class="options">
            <button class="btn btn-back" @onclick="GoBack">Voltar</button>
            <button type="submit" class="btn btn-save">Confirmar</button>
        </div>
    </div>
</EditForm>

<CustomToastNotification @ref="notify" Messages="messages" />

@code {
    public List<ToastMessage> messages = new();
    CustomToastNotification notify;
    Partner data = new();
    int descrioptionSize;
    string imageUrl = string.Empty;
    string base64Image = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        data = await GetPartnerProfile();
        imageUrl = data.ProfileImageUrl;
        base64Image = await ImageUrlToBase64(imageUrl);
        descrioptionSize = string.IsNullOrEmpty(data.Description) ? 0 : data.Description.Length;

        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        var cnpjErrorMessage = ValidateCNPJ(data.CNPJ);
        var adoptionRateErrorMessage = ValidateAdoptionRate(data.AdoptionRate);

        if (!string.IsNullOrEmpty(cnpjErrorMessage))
        {
            notify.ShowMessage(ToastType.Warning, "Aviso", cnpjErrorMessage);
            return;
        }
        else if (!string.IsNullOrEmpty(adoptionRateErrorMessage))
        {
            notify.ShowMessage(ToastType.Warning, "Aviso", adoptionRateErrorMessage);
            return;
        }

        data = await UpdateProfile();
        sessionStorage.SetItem("image", data.ProfileImageUrl);
        navigator.NavigateTo(navigator.Uri, forceLoad: true);
    }

    private async Task<Partner> GetPartnerProfile()
    {
        var id = sessionStorage.GetItem<string>("id");
        var token = sessionStorage.GetItem<string>("token");
        var validTo = Convert.ToDateTime(sessionStorage.GetItem<string>("validTo"));

        if (!string.IsNullOrEmpty(token) && validTo >= DateTime.Now)
        {
            var result = await httpService.GetAsync<CustomResponse<Partner>>($"/users-control/partner?id={id}");

            if (result.IsSuccess) 
                return result.Content.Data;
            else 
                notify.ShowMessage(ToastType.Danger, "Erro", "Não foi possível buscar o usuário. Tente novamente mais tarde!");
        }
        else
        {
            notify.ShowMessage(ToastType.Danger, "Erro", "Sua Sessão expirou. Faça login novamente!");
        }

        return new Partner();
    }

    private async Task<Partner> UpdateProfile()
    {
        var id = sessionStorage.GetItem<string>("id");
        var token = sessionStorage.GetItem<string>("token");
        var validTo = Convert.ToDateTime(sessionStorage.GetItem<string>("validTo"));

        if (!string.IsNullOrEmpty(token) && validTo >= DateTime.Now)
        {
            var result = await httpService.PutAsync<PartnerUpdateRequest,CustomResponse<Partner>>($"/users-control/partners?id={id}", new PartnerUpdateRequest(data, base64Image));

            if (result.IsSuccess)
            {
                notify.ShowMessage(ToastType.Success, "Sucesso", "Funcionou!");
                return result.Content.Data;
            }
            else
            {
                notify.ShowMessage(ToastType.Danger, "Erro", "Não foi possível atualizar o usuário. Tente novamente mais tarde!");
            }
        }
        else
        {
            notify.ShowMessage(ToastType.Danger, "Erro", "Sua Sessão expirou. Faça login novamente!");
        }

        return new Partner();
    }

    private void UpdateDescriptionSize(ChangeEventArgs e)
    {
        descrioptionSize = e.Value?.ToString().Length ?? 0;
    }

    private void OnImageChanged(string newBase64Image)
    {
        imageUrl = $"data:image/png;base64,{newBase64Image}";
        base64Image = newBase64Image;
        StateHasChanged();
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private async Task<string> ImageUrlToBase64(string imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl)) return string.Empty;

        var token = sessionStorage.GetItem<string>("token");
        var validTo = Convert.ToDateTime(sessionStorage.GetItem<string>("validTo"));
        if (!string.IsNullOrEmpty(token) && validTo >= DateTime.Now)
        {
            var result = await httpService.GetAsync<CustomResponse<Base64ImageRequest>>($"pets-control/pets/{data.Id}/base64");
            if (result.IsSuccess)
            {
                byte[] imageBytes = await client.GetByteArrayAsync(imageUrl);
                return Convert.ToBase64String(imageBytes);
            }
        }
        catch (Exception ex)
        {
            notify.ShowMessage(ToastType.Danger, "Erro", "Erro ao converter a imagem para base64: " + ex.Message);
            throw;
        }
        return string.Empty;
    }

    #region Validates
    private string ValidateCNPJ(string cnpj)
    {
        if (string.IsNullOrEmpty(cnpj))
            return null;
        else if (!cnpj.All(char.IsDigit))
            return "O CNPJ deve conter apenas números";
        else if (cnpj.Length != 14)
            return "O CNPJ deve ter 14 dígitos";

        return null;
    }

    private string ValidateAdoptionRate(string adoptionRate)
    {
        if (string.IsNullOrEmpty(adoptionRate))
            return null;
        else if (adoptionRate.Contains('-'))
            return "A Taxa de Adoção não pode ser menor que zero.";

        return null;
    }
    #endregion

    #region SetPageName
    protected override void OnInitialized()
    {
        SetPageName();
    }

    private void SetPageName()
    {
        sessionStorage.SetItem("pageName", "Cãopanheiros");
    }
    #endregion
}
